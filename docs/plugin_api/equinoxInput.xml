<?xml version="1.0" encoding="UTF-8"?><!--Root input element. This element is obligatory, but all its children are optional.-->
<equinoxInput version="" title="" description="" author="" date="" time="">
	
	<!--Instruction settings.-->
	<settings>
		<!--Run mode can be one of 'parallel' (default), 'sequential' or 'save'. Note that, save mode will only save first level tasks (i.e. not the dependent tasks).-->
		<runMode>parallel</runMode>
		<!--If runSilent is set to true, all task submission notifications will be suppressed.-->
		<runSilent>false</runSilent><!--if overwriteFiles is set to true, output files will overwrite existing files (if any). If set to false and ouput file exists, instructions will not run. -->
		<overwriteFiles>true</overwriteFiles>
		<analysisEngine>
			<!--Engine can be one of 'ISAMI Engine', 'SAFE Engine' or 'Inbuilt Engine'.-->
			<engine>Inbuilt Engine</engine>
			<version>v9.7.0</version>
			<subVersion>Derivatives</subVersion>
			<keepOutputFile>true</keepOutputFile>
			<performDetailedAnalysis>true</performDetailedAnalysis>
			<applyCompressionForPropagation>true</applyCompressionForPropagation>
			<fallbackToInbuilt>true</fallbackToInbuilt>
		</analysisEngine>
		<searchEngine><!--Logical operator specifies how to combine search keywords. This can be either 'and' or 'or'.-->
			<logicalOperator>and</logicalOperator>
			<ignoreCase>true</ignoreCase>
			<maxHits>100</maxHits><!--The setting orderResultsBy specifies which attribute to use when ordering search results. This can be one of 'Name', 'Aircraft program', 'Aircraft section', 'Fatigue mission' or 'Delivery reference'.-->
			<orderResultsBy>Name</orderResultsBy><!--The attribute resultsOrder can be either 'Ascending' or 'Descending'.-->
			<resultsOrder>Ascending</resultsOrder></searchEngine>
	</settings><!--Searches spectrum in central database matching with given search entries. If found, downloads the first found spectrum. Note that, as this instruction will download the first found spectrum, it is adviced to supply precise entries which uniquely identifies the spectrum.-->
	<downloadSpectrum>
		<id></id>
		<!--Search entry is used to search and find the requested stf file in central database. Multiple search entries can be supplied for different attributes.-->
		<searchEntry>
			<!--Spectrum attribute name. This can be one of 'NAME', 'AC_PROGRAM', 'AC_SECTION', 'FAT_MISSION', 'FAT_MISSION_ISSUE', 'FLP_ISSUE', 'IFLP_ISSUE', 'CDF_ISSUE', 'DELIVERY_REF_NUM', 'DESCRIPTION'.-->
			<attributeName></attributeName><!--Search keyword for the selected attribute.-->
			<keyword></keyword>
			<!--Criteria to use for the given keyword. This element is optional, if not supplied, default value will be used. This can be one of 'Contains' (default), 'Equals', 'Starts with' or 'Ends with'.-->
			<criteria></criteria>
		</searchEntry>
		<!--Output path to where the downloaded spectrum archive will be saved.-->
		<outputPath></outputPath>
	</downloadSpectrum><!--Adds spectrum to workspace from supplied CDF set files.-->
	<addSpectrum>
		<id></id>
		<anaPath></anaPath>
		<cvtPath></cvtPath>
		<flsPath></flsPath>
		<xlsPath></xlsPath><!--TXT file is optional, if not given, will be generated from CVT and XLS.-->
		<txtPath></txtPath><!--Worksheet name in the conversion table file.-->
		<convSheet></convSheet>
	</addSpectrum>
	
	<!--Adds spectrum to workspace from supplied SPEC bundle.-->
	<addSpectrum>
		<id></id>
		<specPath></specPath>
	</addSpectrum>
	<!--Adds spectrum to workspace downloaded from central AF-Twin database.-->
	<addSpectrum>
		<id></id>
		<downloadId></downloadId>
	</addSpectrum>
	<!--Saves spectrum to given output path.-->
	<saveSpectrum>
		<id></id>
		<spectrumId></spectrumId>
		<!--Path to save spectrum bundle. To save as zip bundle, end file name with .zip. To save as spec bundle, end file name with .spec.-->
		<outputPath></outputPath>
	</saveSpectrum><!--Saves CDF set file to given output path.-->

	<saveSpectrumFile>
		<id></id>
		<spectrumId></spectrumId>
		<!--Path to save spectrum file. File name must end with one of '.ana', '.cvt', '.fls', '.xls' or '.txt'.-->
		<outputPath></outputPath>
	</saveSpectrumFile><!--Shares spectrum with given recipient.-->
	<shareSpectrum>
		<id></id>
		<spectrumId></spectrumId><!--Recipient username. Note that, the recipient must be online at the time of execution.-->
		<recipient></recipient></shareSpectrum><!--Shares CDF set file with given recipient.-->
	<shareSpectrumFile>
		<id></id>
		<spectrumId></spectrumId><!--Type of CDF set file to share. This cane be one of 'ana', 'cvt', 'txt', 'fls' or 'xls'.-->
		<fileType></fileType><!--Recipient username. Note that, the recipient must be online at the time of execution.-->
		<recipient></recipient></shareSpectrumFile><!--Packs and exports spectrum to given ouput path.-->
	<exportSpectrum>
		<id></id>
		<spectrumId></spectrumId><!--Delivery reference. This element is optional. If not supplied, DRAFT will be set.-->
		<deliveryReference></deliveryReference><!--Spectrum description. This element is optional.-->
		<description></description><!--Path to save export file. File name must end with '.zip'.-->
		<outputPath></outputPath></exportSpectrum><!--Deletes spectrum with given id. Note that, this instruction can only be used in sequential run mode.-->
	<deleteSpectrum>
		<id></id>
		<spectrumId></spectrumId></deleteSpectrum><!--Searches pilot point in central database matching with given search entries. If found, downloads the first found pilot point. Note that, as this instruction will download the first found pilot point, it is advised to supply precise entries which uniquely identifies the pilot point.-->


	<downloadStf>
		<id></id><!--Search entry is used to search and find the requested stf file in central database. Multiple search entries can be supplied for different attributes.-->
		<searchEntry><!--Pilot point attribute name. This can be one of 'NAME', 'SPECTRUM_NAME', 'AC_PROGRAM', 'AC_SECTION', 'FAT_MISSION', 'EID', 'FRAME_RIB_POSITION', 'STRINGER_POSITION', 'DATA_SOURCE', 'GENERATION_SOURCE', 'DELIVERY_REF_NUM', 'DESCRIPTION', 'ISSUE', 'FATIGUE_MATERIAL', 'PREFFAS_MATERIAL', 'LINEAR_MATERIAL'.-->
			<attributeName></attributeName>
			<keyword></keyword><!--Criteria to use for the given keyword. This element is optional, if not supplied, default value will be used. This can be one of 'Contains' (default), 'Equals', 'Starts with' or 'Ends with'.-->
			<criteria></criteria></searchEntry>
		
		
		
		<outputPath></outputPath></downloadStf><!--Adds STF file to referenced spectrum.-->
	<addStf>
		<id></id><spectrumId></spectrumId><stfPath></stfPath>
	</addStf><!--Searches pilot point in central database matching with given search entries, and if found, adds it to referenced spectrum. Note that, as this instruction will download the first found pilot point, it is advised to supply precise entries which uniquely identifies the pilot point.-->
	<addStf>
		<id></id>
		<spectrumId></spectrumId><!--Search entry is used to search and find the requested stf file in central database. Multiple search entries can be supplied for different attributes.-->
		<searchEntry>
			<!--Pilot point attribute name. This can be one of 'NAME', 'SPECTRUM_NAME', 'AC_PROGRAM', 'AC_SECTION', 'FAT_MISSION', 'EID', 'FRAME_RIB_POSITION', 'STRINGER_POSITION', 'DATA_SOURCE', 'GENERATION_SOURCE', 'DELIVERY_REF_NUM', 'DESCRIPTION', 'ISSUE', 'FATIGUE_MATERIAL', 'PREFFAS_MATERIAL', 'LINEAR_MATERIAL'.-->
			<attributeName></attributeName>
			<keyword></keyword>
			<!--Criteria to use for the given keyword. This element is optional, if not supplied, default value will be used. This can be one of 'Contains' (default), 'Equals', 'Starts with' or 'Ends with'.-->
			<criteria></criteria>
		</searchEntry>
	</addStf>
	<saveStf></saveStf>
	<shareStf></shareStf>
	<exportStf></exportStf>
	<deleteStf></deleteStf>
	<downloadStf></downloadStf>

	<!--Adds stress sequence to workspace from given SIGMA file.-->
	<addStressSequence>
		<id></id>
		<sigmaPath></sigmaPath>
	</addStressSequence>
	
	<!--Adds stress sequence to workspace from given STH and FLS files.-->
	<addStressSequence>
		<id></id>
		
		<sthPath></sthPath>
		<flsPath></flsPath>
	</addStressSequence>
	
	<!--Generates stress sequence from referenced STF file.-->
	<generateStressSequence>
		<id></id>
		<stfId></stfId><!--Path to XML file containing input parameters for generating stress sequence.-->
		<xmlPath></xmlPath>
	</generateStressSequence><!--Saves stress sequence to given output path.-->

	<saveStressSequence>
		<id></id>
		<stressSequenceId></stressSequenceId><!--Path to save stress sequence. To save as sigma file, append .sigma to file name. To save as sth, append .sth to file name.-->
		<outputPath></outputPath></saveStressSequence>
	<shareStressSequence></shareStressSequence>
	<deleteStressSequence></deleteStressSequence>
	<plotMissionProfile><id></id><stressSequenceId></stressSequenceId><!--Path to save mission profile plot. PNG extension will be appended to file name if necessary.--><outputPath></outputPath></plotMissionProfile>
	<compareMissionProfiles></compareMissionProfiles>
	<plotTypicalFlight><id></id><stressSequenceId></stressSequenceId><typicalFlightName></typicalFlightName><outputPath></outputPath></plotTypicalFlight>
	<compareTypicalFlights></compareTypicalFlights>

	<equivalentStressAnalysis>
		<id></id>
		<stfId></stfId>
		<xmlPath></xmlPath>
	</equivalentStressAnalysis>
	
	<equivalentStressAnalysis>
		<id></id>
		<stressSequenceId></stressSequenceId>
		<xmlPath></xmlPath>
	</equivalentStressAnalysis>
	<plotLevelCrossing><id></id><equivalentStressId></equivalentStressId><outputPath></outputPath></plotLevelCrossing>
	<compareLevelCrossings></compareLevelCrossings>
	<saveAnalysisOutputFile>
		<id></id>
		<outputPath></outputPath></saveAnalysisOutputFile>
	<shareWorkspace></shareWorkspace>
	<sendTextMessage></sendTextMessage>
	<restart></restart>
	<quit></quit></equinoxInput>