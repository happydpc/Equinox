/*
 * Copyright 2018 Murat Artim (muratartim@gmail.com).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package equinox.task;

import java.io.BufferedWriter;
import java.io.File;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import equinox.Equinox;
import equinox.data.StressComponent;
import equinox.data.fileType.STFFile;
import equinox.serverUtilities.Permission;
import equinox.task.InternalEquinoxTask.LongRunningTask;

/**
 * Class for save as 1D STF task.
 *
 * @author Murat Artim
 * @date Nov 30, 2014
 * @time 11:02:26 AM
 */
public class SaveAs1DSTF extends InternalEquinoxTask<Void> implements LongRunningTask {

	/** File item to save. */
	private final STFFile file_;

	/** Output file. */
	private final File output_;

	/** Stress component. */
	private final StressComponent component_;

	/** Rotation angle in radians. */
	private final double angle_;

	/** Formatter for real numbers. */
	private final DecimalFormat numberFormat_ = new DecimalFormat("0.00");

	/**
	 * Creates save as 1D STF task.
	 *
	 * @param file
	 *            File item to save.
	 * @param output
	 *            Output file.
	 * @param component
	 *            Stress component.
	 * @param angle
	 *            Rotation angle in degrees.
	 */
	public SaveAs1DSTF(STFFile file, File output, StressComponent component, double angle) {
		file_ = file;
		output_ = output;
		component_ = component;
		angle_ = Math.toRadians(angle);
	}

	@Override
	public boolean canBeCancelled() {
		return true;
	}

	@Override
	public String getTaskTitle() {
		return "Save as 1D STF file to '" + output_.getName() + "'";
	}

	@Override
	protected Void call() throws Exception {

		// check permission
		checkPermission(Permission.SAVE_FILE);

		// update progress info
		updateTitle("Save as 1D STF file to '" + output_.getName() + "'");

		// create file writer
		try (BufferedWriter writer = Files.newBufferedWriter(output_.toPath(), Charset.defaultCharset())) {

			// write file header
			String line = "# STF file generated by Equinox Version " + Equinox.VERSION.toString() + ", Date: " + new SimpleDateFormat("dd/MM/yyyy").format(new Date());
			writer.write(line);
			writer.newLine();
			line = String.format("%-10s", "ISSY CODE");
			line += String.format("%-10s", "SX");
			writer.write(line);
			writer.newLine();

			// get database connection
			try (Connection connection = Equinox.DBC_POOL.getConnection()) {

				// create statement
				try (Statement statement = connection.createStatement()) {

					// update progress info
					updateMessage("Reading stresses from database...");

					// execute query
					String sql = "select issy_code, stress_x, stress_y, stress_xy from stf_stresses_" + file_.getStressTableID() + " where file_id = " + file_.getID() + " order by issy_code";
					try (ResultSet resultSet = statement.executeQuery(sql)) {
						while (resultSet.next()) {

							// get ISSY code
							line = String.format("%-10s", resultSet.getString("issy_code"));

							// get stress
							double stress = 0.0;
							if (component_.equals(StressComponent.NORMAL_X)) {
								stress = resultSet.getDouble("stress_x");
							}
							else if (component_.equals(StressComponent.NORMAL_Y)) {
								stress = resultSet.getDouble("stress_y");
							}
							else if (component_.equals(StressComponent.SHEAR_XY)) {
								stress = resultSet.getDouble("stress_xy");
							}
							else if (component_.equals(StressComponent.ROTATED)) {
								double x = resultSet.getDouble("stress_x");
								double y = resultSet.getDouble("stress_y");
								double xy = resultSet.getDouble("stress_xy");
								stress = 0.5 * (x + y) + 0.5 * (x - y) * Math.cos(2 * angle_) + xy * Math.sin(2 * angle_);
							}

							// write line
							line += String.format("%-10s", numberFormat_.format(stress));
							writer.write(line);
							writer.newLine();
						}
					}
				}
			}
		}

		// return
		return null;
	}
}
